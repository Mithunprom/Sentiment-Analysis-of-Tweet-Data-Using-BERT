# -*- coding: utf-8 -*-
"""BERT_keras.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hLHlfYVjvAoD605xD34AYAMiyb1i-bds
"""

import tensorflow as tf
pip install bert-tensorflow
pip install -q pyyaml h5py
from bert.tokenization import FullTokenizer
import bert
from bert import run_classifier
from bert import optimization
from bert import tokenization
# Initialize session
from tensorflow.python.keras.backend import set_session
from tensorflow.python.keras.models import load_model

sess = tf.Session()
graph = tf.get_default_graph()

# Params for bert model and tokenization
bert_path = "https://tfhub.dev/google/bert_uncased_L-12_H-768_A-12/1"
max_seq_length = 512

import random
import argparse
import zipfile
import sklearn.metrics
import pandas as pd
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
import numpy as np
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint
import tensorflow_hub as hub
import os
import re
import numpy as np
from bert.tokenization import FullTokenizer
from tqdm import tqdm_notebook
from tensorflow.keras import backend as K

emotions = ["anger", "anticipation", "disgust", "fear", "joy", "love",
            "optimism", "pessimism", "sadness", "surprise", "trust"]
emotion_to_int = {"0": 0, "1": 1, "NONE": -1}
file1='/content/2018-E-c-En-train.txt'
file2='/content/2018-E-c-En-dev.txt'
file3='/content/2018-E-c-En-test.txt'

train_data=pd.read_csv(file1, sep="\t", header=0)
dev_data=pd.read_csv(file2, sep="\t", header=0)
test_data=pd.read_csv(file3, sep="\t", header=0)

# num_sentences =len(train_data)
# corpus_train=[]
# for i in range(num_sentences):
#   corpus_train.append([train_data.iloc[i,1],train_data.iloc[i,2:13]])
# corpus_val=[]
# num_val_sentences=len(dev_data)
# for i in range(num_val_sentences):
#   corpus_val.append([dev_data.iloc[i,1],dev_data.iloc[i,2:13]])

# val_sen=[]
# val_lab=[] 
# # random.shuffle(corpus_train)
# for x in range(num_val_sentences):
#     val_sen.append(corpus_val[x][0])
#     val_lab.append(corpus_val[x][1])
    
# sentences=[]
# labels=[]
# for x in range(num_sentences):
#     sentences.append(corpus_train[x][0])
#     labels.append(corpus_train[x][1])




# # tokenizer.fit_on_texts(sentences)

# # word_index = tokenizer.word_index
# # vocab_size=len(word_index)

# # sequences = tokenizer.texts_to_sequences(sentences)
# # training_sequences = pad_sequences(sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)




# # val_seq=tokenizer.texts_to_sequences(val_sen)
# # val_sequences=pad_sequences(val_seq,maxlen=max_length,padding=padding_type, truncating=trunc_type)

num_sentences =len(train_data)
corpus_train=[]
for i in range(num_sentences):
  corpus_train.append([train_data.iloc[i,1],train_data.iloc[i,2:]])
corpus_val=[]
num_val_sentences=len(dev_data)
for i in range(num_val_sentences):
  corpus_val.append([dev_data.iloc[i,1],dev_data.iloc[i,2:]])
corpus_test=[]
num_test_sentences=len(test_data)
for i in range(num_test_sentences):
  corpus_test.append([test_data.iloc[i,1],test_data.iloc[i,2:]])
test_sen=[]
test_lab=[]
for x in range(num_test_sentences):
    test_sen.append(corpus_test[x][0])
    test_lab.append(corpus_test[x][1])
val_sen=[]
val_lab=[] 
# random.shuffle(corpus_train)
for x in range(num_val_sentences):
    val_sen.append(corpus_val[x][0])
    val_lab.append(corpus_val[x][1])
    
sentences=[]
labels=[]
for x in range(num_sentences):
    sentences.append(corpus_train[x][0])
    labels.append(corpus_train[x][1])

class PaddingInputExample(object):
    """Fake example so the num input examples is a multiple of the batch size.
  When running eval/predict on the TPU, we need to pad the number of examples
  to be a multiple of the batch size, because the TPU requires a fixed batch
  size. The alternative is to drop the last batch, which is bad because it means
  the entire output data won't be generated.
  We use this class instead of `None` because treating `None` as padding
  battches could cause silent errors.
  """

class InputExample(object):
    """A single training/test example for simple sequence classification."""

    def __init__(self, guid, text_a, text_b=None, label=None):
        """Constructs a InputExample.
    Args:
      guid: Unique id for the example.
      text_a: string. The untokenized text of the first sequence. For single
        sequence tasks, only this sequence must be specified.
      text_b: (Optional) string. The untokenized text of the second sequence.
        Only must be specified for sequence pair tasks.
      label: (Optional) string. The label of the example. This should be
        specified for train and dev examples, but not for test examples.
    """
        self.guid = guid
        self.text_a = text_a
        self.text_b = text_b
        self.label = label

def create_tokenizer_from_hub_module():
  """Get the vocab file and casing info from the Hub module."""
  with tf.Graph().as_default():
    bert_module = hub.Module(bert_path)
    tokenization_info = bert_module(signature="tokenization_info", as_dict=True)
    with tf.Session() as sess:
      vocab_file, do_lower_case = sess.run([tokenization_info["vocab_file"],
                                            tokenization_info["do_lower_case"]])
      
  return bert.tokenization.FullTokenizer(
      vocab_file=vocab_file, do_lower_case=do_lower_case)

def convert_single_example(tokenizer, example, max_seq_length=256):
    """Converts a single `InputExample` into a single `InputFeatures`."""

    if isinstance(example, PaddingInputExample):
        input_ids = [0] * max_seq_length
        input_mask = [0] * max_seq_length
        segment_ids = [0] * max_seq_length
        label = 0
        return input_ids, input_mask, segment_ids, label

    tokens_a = tokenizer.tokenize(example.text_a)
    if len(tokens_a) > max_seq_length - 2:
        tokens_a = tokens_a[0 : (max_seq_length - 2)]

    tokens = []
    segment_ids = []
    tokens.append("[CLS]")
    segment_ids.append(0)
    for token in tokens_a:
        tokens.append(token)
        segment_ids.append(0)
    tokens.append("[SEP]")
    segment_ids.append(0)

    input_ids = tokenizer.convert_tokens_to_ids(tokens)

    # The mask has 1 for real tokens and 0 for padding tokens. Only real
    # tokens are attended to.
    input_mask = [1] * len(input_ids)

    # Zero-pad up to the sequence length.
    while len(input_ids) < max_seq_length:
        input_ids.append(0)
        input_mask.append(0)
        segment_ids.append(0)

    assert len(input_ids) == max_seq_length
    assert len(input_mask) == max_seq_length
    assert len(segment_ids) == max_seq_length

    return input_ids, input_mask, segment_ids, example.label

def convert_examples_to_features(tokenizer, examples, max_seq_length=256):
    """Convert a set of `InputExample`s to a list of `InputFeatures`."""

    input_ids, input_masks, segment_ids, labels = [], [], [], []
    for example in tqdm_notebook(examples, desc="Converting examples to features"):
        input_id, input_mask, segment_id, label = convert_single_example(
            tokenizer, example, max_seq_length
        )
        input_ids.append(input_id)
        input_masks.append(input_mask)
        segment_ids.append(segment_id)
        labels.append(label)
    return (
        np.array(input_ids),
        np.array(input_masks),
        np.array(segment_ids),
        np.array(labels).reshape(-1, 1),
    )

def convert_text_to_examples(texts, labels):
    """Create InputExamples"""
    InputExamples = []
    for text, label in zip(texts, labels):
        InputExamples.append(
            InputExample(guid=None, text_a=" ".join(text), text_b=None, label=label)
        )
    return InputExamples

# Instantiate tokenizer
tokenizer = create_tokenizer_from_hub_module()

# Create datasets (Only take up to `max_seq_length` words for memory)

train_text = sentences
train_text = [' '.join(t.split()[0:max_seq_length]) for t in train_text]
train_text = np.array(train_text, dtype=object)[:, np.newaxis]
train_label = np.array(labels)

dev_text = val_sen
dev_text = [' '.join(t.split()[0:max_seq_length]) for t in dev_text]
dev_text = np.array(dev_text, dtype=object)[:, np.newaxis]
dev_label = np.array(val_lab)
print(train_label.shape)

test_text = test_sen
test_text = [' '.join(t.split()[0:max_seq_length]) for t in test_text]
test_text = np.array(test_text, dtype=object)[:, np.newaxis]
test_label = np.array(test_lab)

train_examples = convert_text_to_examples(train_text, train_label)
dev_examples = convert_text_to_examples(dev_text, dev_label)
test_examples = convert_text_to_examples(test_text, test_label)

# (total_input_ids, total_input_masks, total_segment_ids, total_labels 
# ) = convert_examples_to_features(tokenizer, train_examples+dev_examples+test_examples, max_seq_length=max_seq_length)
# total_labels=total_labels.reshape((10983 ,11))

# train_input_ids=total_input_ids[0:6838,:]
# train_input_masks=total_input_masks[0:6838,:]
# train_segment_ids=total_segment_ids[0:6838,:]
# train_labels=total_labels[0:6838,:]
# dev_input_ids=total_input_ids[6838:7724,:]
# dev_input_masks=total_input_masks[6838:7724,:]
# dev_segment_ids=total_segment_ids[6838:7724,:]
# dev_labels=total_labels[6838:7724,:]
# test_input_ids=total_input_ids[7724:10983,:]
# test_input_masks=total_input_masks[7724:10983,:]
# test_segment_ids=total_segment_ids[7724:10983,:]
# test_labels=total_labels[7724:10983,:]

(train_input_ids, train_input_masks, train_segment_ids, train_labels 
) = convert_examples_to_features(tokenizer, train_examples, max_seq_length=max_seq_length)
# (test_input_ids, test_input_masks, test_segment_ids, test_labels
# ) = convert_examples_to_features(tokenizer, test_examples, max_seq_length=max_seq_length)
(dev_input_ids, dev_input_masks, dev_segment_ids, dev_labels
) = convert_examples_to_features(tokenizer, dev_examples, max_seq_length=max_seq_length)
(test_input_ids, test_input_masks, test_segment_ids, test_labels
 ) = convert_examples_to_features(tokenizer, test_examples, max_seq_length=max_seq_length)

print(test_input_ids.shape)
print(test_input_masks.shape)
print(test_segment_ids.shape)
print(test_labels.shape)
test_labels=test_labels.reshape((3259,11))
print(test_labels.shape)
print(train_labels.shape)
train_labels=train_labels.reshape((6838 ,11))
print(train_labels.shape)
dev_labels=dev_labels.reshape((886 ,11))
print(dev_labels.shape)

class BertLayer(tf.keras.layers.Layer):
    def __init__(
        self,
        n_fine_tune_layers=10,
        pooling="first",
        bert_path="https://tfhub.dev/google/bert_uncased_L-12_H-768_A-12/1",
        **kwargs,
    ):
        self.n_fine_tune_layers = n_fine_tune_layers
        self.trainable = True
        self.output_size = 768
        self.pooling = pooling
        self.bert_path = bert_path
        if self.pooling not in ["first", "mean"]:
            raise NameError(
                f"Undefined pooling type (must be either first or mean, but is {self.pooling}"
            )

        super(BertLayer, self).__init__(**kwargs)

    def build(self, input_shape):
        self.bert = hub.Module(
            self.bert_path, trainable=self.trainable, name=f"{self.name}_module"
        )

        # Remove unused layers
        trainable_vars = self.bert.variables
        if self.pooling == "first":
            trainable_vars = [var for var in trainable_vars if not "/cls/" in var.name]
            trainable_layers = ["pooler/dense"]

        elif self.pooling == "mean":
            trainable_vars = [
                var
                for var in trainable_vars
                if not "/cls/" in var.name and not "/pooler/" in var.name
            ]
            trainable_layers = []
        else:
            raise NameError(
                f"Undefined pooling type (must be either first or mean, but is {self.pooling}"
            )

        # Select how many layers to fine tune
        for i in range(self.n_fine_tune_layers):
            trainable_layers.append(f"encoder/layer_{str(11 - i)}")

        # Update trainable vars to contain only the specified layers
        trainable_vars = [
            var
            for var in trainable_vars
            if any([l in var.name for l in trainable_layers])
        ]

        # Add to trainable weights
        for var in trainable_vars:
            self._trainable_weights.append(var)

        for var in self.bert.variables:
            if var not in self._trainable_weights:
                self._non_trainable_weights.append(var)

        super(BertLayer, self).build(input_shape)

    def call(self, inputs):
        inputs = [K.cast(x, dtype="int32") for x in inputs]
        input_ids, input_mask, segment_ids = inputs
        bert_inputs = dict(
            input_ids=input_ids, input_mask=input_mask, segment_ids=segment_ids
        )
        if self.pooling == "first":
            pooled = self.bert(inputs=bert_inputs, signature="tokens", as_dict=True)[
                "pooled_output"
            ]
        elif self.pooling == "mean":
            result = self.bert(inputs=bert_inputs, signature="tokens", as_dict=True)[
                "sequence_output"
            ]

            mul_mask = lambda x, m: x * tf.expand_dims(m, axis=-1)
            masked_reduce_mean = lambda x, m: tf.reduce_sum(mul_mask(x, m), axis=1) / (
                    tf.reduce_sum(m, axis=1, keepdims=True) + 1e-10)
            input_mask = tf.cast(input_mask, tf.float32)
            pooled = masked_reduce_mean(result, input_mask)
        else:
            raise NameError(f"Undefined pooling type (must be either first or mean, but is {self.pooling}")

        return pooled

    def compute_output_shape(self, input_shape):
        return (input_shape[0], self.output_size)

train_labels.shape

def build_model(max_seq_length): 
    in_id = tf.keras.layers.Input(shape=(max_seq_length,), name="input_ids")
    in_mask = tf.keras.layers.Input(shape=(max_seq_length,), name="input_masks")
    in_segment = tf.keras.layers.Input(shape=(max_seq_length,), name="segment_ids")
    bert_inputs = [in_id, in_mask, in_segment]
    
    bert_output = BertLayer(n_fine_tune_layers=3, pooling="mean")(bert_inputs)################should be first
    dense = tf.keras.layers.Dense(128, activation='relu')(bert_output)
    drop=tf.keras.layers.Dropout(.2)(dense)
    pred = tf.keras.layers.Dense(11, activation='sigmoid')(bert_output)
    
    model = tf.keras.models.Model(inputs=bert_inputs, outputs=pred)
    model.compile(loss='binary_crossentropy', optimizer=tf.keras.optimizers.Adam(learning_rate=5e-5), metrics=['accuracy'])
    model.summary()
    return model
    # tf.keras.optimizers.Adam(learning_rate=0.0001,
    # beta_1=0.9, #chaning this towards zero converges to SGD
    # beta_2=0.999,#This is used for decaying the running average of the square of gradient (0.999)
    # epsilon=1e-07)

def initialize_vars(sess):
    sess.run(tf.local_variables_initializer())
    sess.run(tf.global_variables_initializer())
    sess.run(tf.tables_initializer())
    K.set_session(sess)

model = build_model(max_seq_length)
# callbacks=[EarlyStopping(patience=3, restore_best_weights=True)]
callback=EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=3, restore_best_weights=True)
# Instantiate variables
initialize_vars(sess)
checkpoint_path = "/content/cp.ckpt"
checkpoint_dir = os.path.dirname(checkpoint_path)

# Create a callback that saves the model's weights
cp_callback = ModelCheckpoint(filepath=checkpoint_path,
                                                 save_weights_only=True,
                                                 verbose=1)
model.fit(
    [train_input_ids, train_input_masks, train_segment_ids], 
    train_labels,
    validation_data=([dev_input_ids, dev_input_masks, dev_segment_ids], dev_labels),
    epochs=8,
    batch_size=24,
    callbacks=[callback,cp_callback])

dev_prediction = model.predict([dev_input_ids, dev_input_masks, dev_segment_ids]) # predictions before we clear and reload model

# # Clear and load model
# model = None
# model = build_model(max_seq_length)
# initialize_vars(sess)
# model.load_weights('BertModel.h5')

# post_save_preds = model.predict([test_input_ids, 
#                                 test_input_masks, 
#                                 test_segment_ids]
#                               ) # predictions after we clear and reload model
# all(pre_save_preds == post_save_preds) # Are they the same?
# Model: "model_4"

# maz=0
# a=range(29,45)
# for i in a:
#   dev_predictions[dev_prediction>i] = 1
#   dev_predictions_1=pd.DataFrame(dev_predictions)
#   dev_predictions_1.columns=emotions
#   la=sklearn.metrics.jaccard_similarity_score(
#       dev_data[emotions], dev_predictions_1[emotions]))
#   maz=max(maz,la)
dev_predictions = np.zeros(dev_prediction.shape)
dev_predictions[dev_prediction>.35] = 1
dev_predictions=pd.DataFrame(dev_predictions)
dev_predictions.columns=emotions

print("accuracy: {:.3f}".format(sklearn.metrics.jaccard_similarity_score(
    dev_data[emotions], dev_predictions[emotions])))



# dev_predictions[:] = dev_predictions[:].astype(int)
# dev_res_data=pd.read_csv(file2, sep="\t", header=0)
# dev_res_data.iloc[:,3:]=dev_predictions
# dev_res_data.to_csv("E-C_en_pred.txt", sep="\t", index=False)
# with zipfile.ZipFile('submission.zip', mode='w') as submission_zip:
#     submission_zip.write("E-C_en_pred.txt")

test_prediction = model.predict([test_input_ids, test_input_masks, test_segment_ids]) # predictions before we clear and reload model

test_predictions = np.zeros(test_prediction.shape)
test_predictions[test_prediction>.29] = 1
test_predictions=pd.DataFrame(test_predictions)
test_predictions.columns=emotions
# print("accuracy: {:.3f}".format(sklearn.metrics.jaccard_similarity_score(
#     test_data[emotions], test_predictions[emotions])))

test_predictions[:] = test_predictions[:].astype(int)
test_res_data=pd.read_csv(file3, sep="\t", header=0)
test_res_data.iloc[:,2:]=test_predictions
test_res_data.to_csv("E-C_en_pred.txt", sep="\t", index=False)
with zipfile.ZipFile('submission.zip', mode='w') as submission_zip:
    submission_zip.write("E-C_en_pred.txt")